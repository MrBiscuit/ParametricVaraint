// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: SG8mWtC3wc
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Diff from '../../Diff'; // plasmic-import: EdYLllBgHm/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicDiffContent.module.css'; // plasmic-import: SG8mWtC3wc/css

import SeparatorIcon from './icons/PlasmicIcon__Separator'; // plasmic-import: _JYn_hvct4/icon

export type PlasmicDiffContent__VariantMembers = {
    hidden: 'hidden';
    empty: 'empty';
};

export type PlasmicDiffContent__VariantsArgs = {
    hidden?: SingleBooleanChoiceArg<'hidden'>;
    empty?: SingleBooleanChoiceArg<'empty'>;
};

type VariantPropType = keyof PlasmicDiffContent__VariantsArgs;
export const PlasmicDiffContent__VariantProps = new Array<VariantPropType>('hidden', 'empty');

export type PlasmicDiffContent__ArgsType = {
    allDiffs?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDiffContent__ArgsType;
export const PlasmicDiffContent__ArgProps = new Array<ArgPropType>('allDiffs');

export type PlasmicDiffContent__OverridesType = {
    root?: p.Flex<'div'>;
    frame27?: p.Flex<'div'>;
    title3?: p.Flex<'div'>;
    title4?: p.Flex<'div'>;
    freeBox?: p.Flex<'div'>;
    svg?: p.Flex<'svg'>;
    text?: p.Flex<'div'>;
};

export interface DefaultDiffContentProps {
    allDiffs?: React.ReactNode;
    hidden?: SingleBooleanChoiceArg<'hidden'>;
    empty?: SingleBooleanChoiceArg<'empty'>;
    className?: string;
}

function PlasmicDiffContent__RenderFunc(props: {
    variants: PlasmicDiffContent__VariantsArgs;
    args: PlasmicDiffContent__ArgsType;
    overrides: PlasmicDiffContent__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        (hasVariant(variants, 'hidden', 'hidden') ? true : true) ? (
            <div
                data-plasmic-name={'root'}
                data-plasmic-override={overrides.root}
                data-plasmic-root={true}
                data-plasmic-for-node={forNode}
                className={classNames(
                    projectcss.all,
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    sty.root,
                    {[sty.roothidden]: hasVariant(variants, 'hidden', 'hidden')}
                )}
            >
                <p.Stack
                    as={'div'}
                    data-plasmic-name={'frame27'}
                    data-plasmic-override={overrides.frame27}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame27, {
                        [sty.frame27hidden]: hasVariant(variants, 'hidden', 'hidden'),
                    })}
                >
                    <div
                        data-plasmic-name={'title3'}
                        data-plasmic-override={overrides.title3}
                        className={classNames(projectcss.all, sty.title3)}
                    >
                        <div
                            data-plasmic-name={'title4'}
                            data-plasmic-override={overrides.title4}
                            className={classNames(projectcss.all, projectcss.__wab_text, sty.title4)}
                        >
                            {'Overrides'}
                        </div>
                    </div>
                </p.Stack>

                {(hasVariant(variants, 'empty', 'empty') ? true : true) ? (
                    <div
                        data-plasmic-name={'freeBox'}
                        data-plasmic-override={overrides.freeBox}
                        className={classNames(projectcss.all, sty.freeBox, {
                            [sty.freeBoxempty]: hasVariant(variants, 'empty', 'empty'),
                        })}
                    >
                        {p.renderPlasmicSlot({
                            defaultContents: <Diff className={classNames('__wab_instance', sty.diff__dOkeC)} />,

                            value: args.allDiffs,
                        })}
                    </div>
                ) : null}

                <SeparatorIcon
                    data-plasmic-name={'svg'}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={'img'}
                />

                <div
                    data-plasmic-name={'text'}
                    data-plasmic-override={overrides.text}
                    className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
                        [sty.textempty]: hasVariant(variants, 'empty', 'empty'),
                    })}
                >
                    {hasVariant(variants, 'empty', 'empty')
                        ? 'This variant have no differences from base yet. All differences will be shown here.'
                        : 'You can copy(âŒ˜C), paste, or delete these overrides'}
                </div>
            </div>
        ) : null
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'frame27', 'title3', 'title4', 'freeBox', 'svg', 'text'],
    frame27: ['frame27', 'title3', 'title4'],
    title3: ['title3', 'title4'],
    title4: ['title4'],
    freeBox: ['freeBox'],
    svg: ['svg'],
    text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    frame27: 'div';
    title3: 'div';
    title4: 'div';
    freeBox: 'div';
    svg: 'svg';
    text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicDiffContent__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicDiffContent__VariantsArgs;
        args?: PlasmicDiffContent__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicDiffContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicDiffContent__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicDiffContent__ArgProps,
            internalVariantPropNames: PlasmicDiffContent__VariantProps,
        });

        return PlasmicDiffContent__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicDiffContent';
    } else {
        func.displayName = `PlasmicDiffContent.${nodeName}`;
    }
    return func;
}

export const PlasmicDiffContent = Object.assign(
    // Top-level PlasmicDiffContent renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        frame27: makeNodeComponent('frame27'),
        title3: makeNodeComponent('title3'),
        title4: makeNodeComponent('title4'),
        freeBox: makeNodeComponent('freeBox'),
        svg: makeNodeComponent('svg'),
        text: makeNodeComponent('text'),

        // Metadata about props expected for PlasmicDiffContent
        internalVariantProps: PlasmicDiffContent__VariantProps,
        internalArgProps: PlasmicDiffContent__ArgProps,
    }
);

export default PlasmicDiffContent;
/* prettier-ignore-end */
