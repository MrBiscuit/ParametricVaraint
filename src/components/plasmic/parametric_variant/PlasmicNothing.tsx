// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: j_YCk93j1o
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicNothing.module.css'; // plasmic-import: j_YCk93j1o/css

import SeparatorIcon from './icons/PlasmicIcon__Separator'; // plasmic-import: _JYn_hvct4/icon
import _Icon from './icons/PlasmicIcon___'; // plasmic-import: v-4VAvBIyg/icon

export type PlasmicNothing__VariantMembers = {};

export type PlasmicNothing__VariantsArgs = {};
type VariantPropType = keyof PlasmicNothing__VariantsArgs;
export const PlasmicNothing__VariantProps = new Array<VariantPropType>();

export type PlasmicNothing__ArgsType = {};
type ArgPropType = keyof PlasmicNothing__ArgsType;
export const PlasmicNothing__ArgProps = new Array<ArgPropType>();

export type PlasmicNothing__OverridesType = {
    root?: p.Flex<'div'>;
    oldSetSelection2?: p.Flex<'div'>;
    floatingTitleBar7?: p.Flex<'div'>;
    title22?: p.Flex<'div'>;
    title23?: p.Flex<'div'>;
    text?: p.Flex<'div'>;
};

export interface DefaultNothingProps {
    className?: string;
}

function PlasmicNothing__RenderFunc(props: {
    variants: PlasmicNothing__VariantsArgs;
    args: PlasmicNothing__ArgsType;
    overrides: PlasmicNothing__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <React.Fragment>
            {}
            {}

            <div className={projectcss.plasmic_page_wrapper}>
                <div
                    data-plasmic-name={'root'}
                    data-plasmic-override={overrides.root}
                    data-plasmic-root={true}
                    data-plasmic-for-node={forNode}
                    className={classNames(
                        projectcss.all,
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        sty.root
                    )}
                >
                    <div
                        data-plasmic-name={'oldSetSelection2'}
                        data-plasmic-override={overrides.oldSetSelection2}
                        className={classNames(projectcss.all, sty.oldSetSelection2)}
                    >
                        <div
                            data-plasmic-name={'floatingTitleBar7'}
                            data-plasmic-override={overrides.floatingTitleBar7}
                            className={classNames(projectcss.all, sty.floatingTitleBar7)}
                        >
                            <SeparatorIcon className={classNames(projectcss.all, sty.svg__ut6T6)} role={'img'} />

                            <_Icon className={classNames(projectcss.all, sty.svg__pkF8C)} role={'img'} />

                            <div
                                data-plasmic-name={'title22'}
                                data-plasmic-override={overrides.title22}
                                className={classNames(projectcss.all, sty.title22)}
                            >
                                <div
                                    data-plasmic-name={'title23'}
                                    data-plasmic-override={overrides.title23}
                                    className={classNames(projectcss.all, projectcss.__wab_text, sty.title23)}
                                >
                                    {'Parametric Variants â—†'}
                                </div>
                            </div>
                        </div>

                        <div
                            data-plasmic-name={'text'}
                            data-plasmic-override={overrides.text}
                            className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
                        >
                            {'this is a base varaint, any changes made to base will be reflected to all varaints'}
                        </div>
                    </div>
                </div>
            </div>
        </React.Fragment>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'oldSetSelection2', 'floatingTitleBar7', 'title22', 'title23', 'text'],
    oldSetSelection2: ['oldSetSelection2', 'floatingTitleBar7', 'title22', 'title23', 'text'],
    floatingTitleBar7: ['floatingTitleBar7', 'title22', 'title23'],
    title22: ['title22', 'title23'],
    title23: ['title23'],
    text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    oldSetSelection2: 'div';
    floatingTitleBar7: 'div';
    title22: 'div';
    title23: 'div';
    text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicNothing__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicNothing__VariantsArgs;
        args?: PlasmicNothing__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicNothing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicNothing__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicNothing__ArgProps,
            internalVariantPropNames: PlasmicNothing__VariantProps,
        });

        return PlasmicNothing__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicNothing';
    } else {
        func.displayName = `PlasmicNothing.${nodeName}`;
    }
    return func;
}

export const PlasmicNothing = Object.assign(
    // Top-level PlasmicNothing renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        oldSetSelection2: makeNodeComponent('oldSetSelection2'),
        floatingTitleBar7: makeNodeComponent('floatingTitleBar7'),
        title22: makeNodeComponent('title22'),
        title23: makeNodeComponent('title23'),
        text: makeNodeComponent('text'),

        // Metadata about props expected for PlasmicNothing
        internalVariantProps: PlasmicNothing__VariantProps,
        internalArgProps: PlasmicNothing__ArgProps,
    }
);

export default PlasmicNothing;
/* prettier-ignore-end */
