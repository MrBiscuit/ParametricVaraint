// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: 9gDMeQgA0S
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';
import RadioItem from '../../RadioItem'; // plasmic-import: TRE54cYrIj/component
import TextInput from '../../TextInput'; // plasmic-import: y7q_0ypjEAV/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicDefaultValue.module.css'; // plasmic-import: 9gDMeQgA0S/css

import SearchsvgIcon from './icons/PlasmicIcon__Searchsvg'; // plasmic-import: Yy4Onm11Fyc/icon
import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: a4mMCsJ6DBo/icon

export type PlasmicDefaultValue__VariantMembers = {
    showInput: 'showInput';
};

export type PlasmicDefaultValue__VariantsArgs = {
    showInput?: SingleBooleanChoiceArg<'showInput'>;
};

type VariantPropType = keyof PlasmicDefaultValue__VariantsArgs;
export const PlasmicDefaultValue__VariantProps = new Array<VariantPropType>('showInput');

export type PlasmicDefaultValue__ArgsType = {};
type ArgPropType = keyof PlasmicDefaultValue__ArgsType;
export const PlasmicDefaultValue__ArgProps = new Array<ArgPropType>();

export type PlasmicDefaultValue__OverridesType = {
    root?: p.Flex<'div'>;
    defaultValue?: p.Flex<'div'>;
    text?: p.Flex<'div'>;
    frame21?: p.Flex<'div'>;
    valueTrue?: p.Flex<typeof RadioItem>;
    valueFalse?: p.Flex<typeof RadioItem>;
    nameInput?: p.Flex<typeof TextInput>;
};

export interface DefaultDefaultValueProps {
    showInput?: SingleBooleanChoiceArg<'showInput'>;
    className?: string;
}

function PlasmicDefaultValue__RenderFunc(props: {
    variants: PlasmicDefaultValue__VariantsArgs;
    args: PlasmicDefaultValue__ArgsType;
    overrides: PlasmicDefaultValue__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <p.Stack
            as={'div'}
            data-plasmic-name={'root'}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
                projectcss.all,
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                sty.root,
                {[sty.rootshowInput]: hasVariant(variants, 'showInput', 'showInput')}
            )}
        >
            <div
                data-plasmic-name={'defaultValue'}
                data-plasmic-override={overrides.defaultValue}
                className={classNames(projectcss.all, sty.defaultValue)}
            >
                <div
                    data-plasmic-name={'text'}
                    data-plasmic-override={overrides.text}
                    className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
                >
                    {'Default Value'}
                </div>
            </div>

            {(hasVariant(variants, 'showInput', 'showInput') ? true : true) ? (
                <div
                    data-plasmic-name={'frame21'}
                    data-plasmic-override={overrides.frame21}
                    className={classNames(projectcss.all, sty.frame21, {
                        [sty.frame21showInput]: hasVariant(variants, 'showInput', 'showInput'),
                    })}
                >
                    <RadioItem
                        data-plasmic-name={'valueTrue'}
                        data-plasmic-override={overrides.valueTrue}
                        active={true}
                        className={classNames('__wab_instance', sty.valueTrue)}
                    >
                        {'True'}
                    </RadioItem>

                    <RadioItem
                        data-plasmic-name={'valueFalse'}
                        data-plasmic-override={overrides.valueFalse}
                        className={classNames('__wab_instance', sty.valueFalse)}
                    >
                        {'False'}
                    </RadioItem>
                </div>
            ) : null}
            {(hasVariant(variants, 'showInput', 'showInput') ? true : false) ? (
                <TextInput
                    data-plasmic-name={'nameInput'}
                    data-plasmic-override={overrides.nameInput}
                    className={classNames('__wab_instance', sty.nameInput, {
                        [sty.nameInputshowInput]: hasVariant(variants, 'showInput', 'showInput'),
                    })}
                    defaultValue={'' as const}
                    placeholder={'Enter Default Value...' as const}
                />
            ) : null}
        </p.Stack>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'defaultValue', 'text', 'frame21', 'valueTrue', 'valueFalse', 'nameInput'],
    defaultValue: ['defaultValue', 'text'],
    text: ['text'],
    frame21: ['frame21', 'valueTrue', 'valueFalse'],
    valueTrue: ['valueTrue'],
    valueFalse: ['valueFalse'],
    nameInput: ['nameInput'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    defaultValue: 'div';
    text: 'div';
    frame21: 'div';
    valueTrue: typeof RadioItem;
    valueFalse: typeof RadioItem;
    nameInput: typeof TextInput;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicDefaultValue__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicDefaultValue__VariantsArgs;
        args?: PlasmicDefaultValue__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicDefaultValue__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicDefaultValue__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicDefaultValue__ArgProps,
            internalVariantPropNames: PlasmicDefaultValue__VariantProps,
        });

        return PlasmicDefaultValue__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicDefaultValue';
    } else {
        func.displayName = `PlasmicDefaultValue.${nodeName}`;
    }
    return func;
}

export const PlasmicDefaultValue = Object.assign(
    // Top-level PlasmicDefaultValue renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        defaultValue: makeNodeComponent('defaultValue'),
        text: makeNodeComponent('text'),
        frame21: makeNodeComponent('frame21'),
        valueTrue: makeNodeComponent('valueTrue'),
        valueFalse: makeNodeComponent('valueFalse'),
        nameInput: makeNodeComponent('nameInput'),

        // Metadata about props expected for PlasmicDefaultValue
        internalVariantProps: PlasmicDefaultValue__VariantProps,
        internalArgProps: PlasmicDefaultValue__ArgProps,
    }
);

export default PlasmicDefaultValue;
/* prettier-ignore-end */
