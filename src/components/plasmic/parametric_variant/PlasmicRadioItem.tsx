// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: TRE54cYrIj
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicRadioItem.module.css'; // plasmic-import: TRE54cYrIj/css

export type PlasmicRadioItem__VariantMembers = {
    active: 'active';
};

export type PlasmicRadioItem__VariantsArgs = {
    active?: SingleBooleanChoiceArg<'active'>;
};

type VariantPropType = keyof PlasmicRadioItem__VariantsArgs;
export const PlasmicRadioItem__VariantProps = new Array<VariantPropType>('active');

export type PlasmicRadioItem__ArgsType = {
    children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRadioItem__ArgsType;
export const PlasmicRadioItem__ArgProps = new Array<ArgPropType>('children');

export type PlasmicRadioItem__OverridesType = {
    root?: p.Flex<'div'>;
    freeBox?: p.Flex<'div'>;
};

export interface DefaultRadioItemProps {
    children?: React.ReactNode;
    active?: SingleBooleanChoiceArg<'active'>;
    className?: string;
}

function PlasmicRadioItem__RenderFunc(props: {
    variants: PlasmicRadioItem__VariantsArgs;
    args: PlasmicRadioItem__ArgsType;
    overrides: PlasmicRadioItem__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <div
            data-plasmic-name={'root'}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
                projectcss.all,
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                sty.root,
                {[sty.rootactive]: hasVariant(variants, 'active', 'active')}
            )}
        >
            <div
                data-plasmic-name={'freeBox'}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox, {
                    [sty.freeBoxactive]: hasVariant(variants, 'active', 'active'),
                })}
            >
                {p.renderPlasmicSlot({
                    defaultContents: 'radio.item',
                    value: args.children,
                    className: classNames(sty.slotTargetChildren, {
                        [sty.slotTargetChildrenactive]: hasVariant(variants, 'active', 'active'),
                    }),
                })}
            </div>
        </div>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'freeBox'],
    freeBox: ['freeBox'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    freeBox: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicRadioItem__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicRadioItem__VariantsArgs;
        args?: PlasmicRadioItem__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicRadioItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicRadioItem__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicRadioItem__ArgProps,
            internalVariantPropNames: PlasmicRadioItem__VariantProps,
        });

        return PlasmicRadioItem__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicRadioItem';
    } else {
        func.displayName = `PlasmicRadioItem.${nodeName}`;
    }
    return func;
}

export const PlasmicRadioItem = Object.assign(
    // Top-level PlasmicRadioItem renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        freeBox: makeNodeComponent('freeBox'),

        // Metadata about props expected for PlasmicRadioItem
        internalVariantProps: PlasmicRadioItem__VariantProps,
        internalArgProps: PlasmicRadioItem__ArgProps,
    }
);

export default PlasmicRadioItem;
/* prettier-ignore-end */
