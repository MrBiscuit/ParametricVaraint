// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: EdYLllBgHm
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Arrow from '../../Arrow'; // plasmic-import: p_FCLC3X1L/component
import Remove from '../../Remove'; // plasmic-import: gfQV_fY2gI/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicDiff.module.css'; // plasmic-import: EdYLllBgHm/css

import IconIcon from './icons/PlasmicIcon__Icon'; // plasmic-import: BwRzRFBIAs/icon

export type PlasmicDiff__VariantMembers = {
    hasIcon: 'hasIcon';
};

export type PlasmicDiff__VariantsArgs = {
    hasIcon?: SingleBooleanChoiceArg<'hasIcon'>;
};

type VariantPropType = keyof PlasmicDiff__VariantsArgs;
export const PlasmicDiff__VariantProps = new Array<VariantPropType>('hasIcon');

export type PlasmicDiff__ArgsType = {
    name?: React.ReactNode;
    value?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDiff__ArgsType;
export const PlasmicDiff__ArgProps = new Array<ArgPropType>('name', 'value');

export type PlasmicDiff__OverridesType = {
    root?: p.Flex<'div'>;
    frame95?: p.Flex<'div'>;
    svg?: p.Flex<'svg'>;
    arrow?: p.Flex<typeof Arrow>;
    frame96?: p.Flex<'div'>;
    remove?: p.Flex<typeof Remove>;
};

export interface DefaultDiffProps {
    name?: React.ReactNode;
    value?: React.ReactNode;
    hasIcon?: SingleBooleanChoiceArg<'hasIcon'>;
    className?: string;
}

function PlasmicDiff__RenderFunc(props: {
    variants: PlasmicDiff__VariantsArgs;
    args: PlasmicDiff__ArgsType;
    overrides: PlasmicDiff__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <p.Stack
            as={'div'}
            data-plasmic-name={'root'}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
                projectcss.all,
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                sty.root,
                {[sty.roothasIcon]: hasVariant(variants, 'hasIcon', 'hasIcon')}
            )}
        >
            <p.Stack
                as={'div'}
                data-plasmic-name={'frame95'}
                data-plasmic-override={overrides.frame95}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame95)}
            >
                {p.renderPlasmicSlot({
                    defaultContents: 'Constraint',
                    value: args.name,
                    className: classNames(sty.slotTargetName, {
                        [sty.slotTargetNamehasIcon]: hasVariant(variants, 'hasIcon', 'hasIcon'),
                    }),
                })}

                {(hasVariant(variants, 'hasIcon', 'hasIcon') ? true : true) ? (
                    <IconIcon
                        data-plasmic-name={'svg'}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                            [sty.svghasIcon]: hasVariant(variants, 'hasIcon', 'hasIcon'),
                        })}
                        role={'img'}
                    />
                ) : null}
            </p.Stack>

            <Arrow
                data-plasmic-name={'arrow'}
                data-plasmic-override={overrides.arrow}
                className={classNames('__wab_instance', sty.arrow)}
            />

            <p.Stack
                as={'div'}
                data-plasmic-name={'frame96'}
                data-plasmic-override={overrides.frame96}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame96)}
            >
                {p.renderPlasmicSlot({
                    defaultContents: 'top and bottom',
                    value: args.value,
                    className: classNames(sty.slotTargetValue, {
                        [sty.slotTargetValuehasIcon]: hasVariant(variants, 'hasIcon', 'hasIcon'),
                    }),
                })}

                <Remove
                    data-plasmic-name={'remove'}
                    data-plasmic-override={overrides.remove}
                    className={classNames('__wab_instance', sty.remove)}
                />
            </p.Stack>
        </p.Stack>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'frame95', 'svg', 'arrow', 'frame96', 'remove'],
    frame95: ['frame95', 'svg'],
    svg: ['svg'],
    arrow: ['arrow'],
    frame96: ['frame96', 'remove'],
    remove: ['remove'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    frame95: 'div';
    svg: 'svg';
    arrow: typeof Arrow;
    frame96: 'div';
    remove: typeof Remove;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicDiff__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicDiff__VariantsArgs;
        args?: PlasmicDiff__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicDiff__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicDiff__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicDiff__ArgProps,
            internalVariantPropNames: PlasmicDiff__VariantProps,
        });

        return PlasmicDiff__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicDiff';
    } else {
        func.displayName = `PlasmicDiff.${nodeName}`;
    }
    return func;
}

export const PlasmicDiff = Object.assign(
    // Top-level PlasmicDiff renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        frame95: makeNodeComponent('frame95'),
        svg: makeNodeComponent('svg'),
        arrow: makeNodeComponent('arrow'),
        frame96: makeNodeComponent('frame96'),
        remove: makeNodeComponent('remove'),

        // Metadata about props expected for PlasmicDiff
        internalVariantProps: PlasmicDiff__VariantProps,
        internalArgProps: PlasmicDiff__ArgProps,
    }
);

export default PlasmicDiff;
/* prettier-ignore-end */
