// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: RTxR7eGbCO
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Arrow from '../../Arrow'; // plasmic-import: p_FCLC3X1L/component
import Remove from '../../Remove'; // plasmic-import: gfQV_fY2gI/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicInspectDiff.module.css'; // plasmic-import: RTxR7eGbCO/css

import IconIcon from './icons/PlasmicIcon__Icon'; // plasmic-import: BwRzRFBIAs/icon
import SeparatorIcon from './icons/PlasmicIcon__Separator'; // plasmic-import: _JYn_hvct4/icon

export type PlasmicInspectDiff__VariantMembers = {};

export type PlasmicInspectDiff__VariantsArgs = {};
type VariantPropType = keyof PlasmicInspectDiff__VariantsArgs;
export const PlasmicInspectDiff__VariantProps = new Array<VariantPropType>();

export type PlasmicInspectDiff__ArgsType = {};
type ArgPropType = keyof PlasmicInspectDiff__ArgsType;
export const PlasmicInspectDiff__ArgProps = new Array<ArgPropType>();

export type PlasmicInspectDiff__OverridesType = {
    root?: p.Flex<'div'>;
    selection?: p.Flex<'div'>;
    frame52?: p.Flex<'div'>;
    frame27?: p.Flex<'div'>;
    title3?: p.Flex<'div'>;
    title4?: p.Flex<'div'>;
    _32Minus?: p.Flex<'div'>;
    layerListRow?: p.Flex<'div'>;
    frame87?: p.Flex<'div'>;
    rgb?: p.Flex<'div'>;
    frame89?: p.Flex<'div'>;
    layerListRow2?: p.Flex<'div'>;
    rgb2?: p.Flex<'div'>;
    frame90?: p.Flex<'div'>;
    a?: p.Flex<'div'>;
    layerListRow3?: p.Flex<'div'>;
    frame86?: p.Flex<'div'>;
    rgb3?: p.Flex<'div'>;
    frame91?: p.Flex<'div'>;
    a2?: p.Flex<'div'>;
    layerListRow4?: p.Flex<'div'>;
    frame88?: p.Flex<'div'>;
    rgb4?: p.Flex<'div'>;
    frame92?: p.Flex<'div'>;
    a3?: p.Flex<'div'>;
    layerListRow5?: p.Flex<'div'>;
    frame93?: p.Flex<'div'>;
    rgb5?: p.Flex<'div'>;
    frame94?: p.Flex<'div'>;
    a4?: p.Flex<'div'>;
    layerListRow6?: p.Flex<'div'>;
    frame95?: p.Flex<'div'>;
    rgb6?: p.Flex<'div'>;
    frame96?: p.Flex<'div'>;
    a5?: p.Flex<'div'>;
    layerListRow7?: p.Flex<'div'>;
    frame97?: p.Flex<'div'>;
    rgb7?: p.Flex<'div'>;
    frame98?: p.Flex<'div'>;
    a6?: p.Flex<'div'>;
    frame51?: p.Flex<'div'>;
    frame?: p.Flex<'div'>;
    text?: p.Flex<'div'>;
};

export interface DefaultInspectDiffProps {
    className?: string;
}

function PlasmicInspectDiff__RenderFunc(props: {
    variants: PlasmicInspectDiff__VariantsArgs;
    args: PlasmicInspectDiff__ArgsType;
    overrides: PlasmicInspectDiff__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <React.Fragment>
            {}
            {}

            <div className={projectcss.plasmic_page_wrapper}>
                <div
                    data-plasmic-name={'root'}
                    data-plasmic-override={overrides.root}
                    data-plasmic-root={true}
                    data-plasmic-for-node={forNode}
                    className={classNames(
                        projectcss.all,
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        sty.root
                    )}
                >
                    <div
                        data-plasmic-name={'selection'}
                        data-plasmic-override={overrides.selection}
                        className={classNames(projectcss.all, sty.selection)}
                    >
                        <p.Stack
                            as={'div'}
                            data-plasmic-name={'frame52'}
                            data-plasmic-override={overrides.frame52}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame52)}
                        >
                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'frame27'}
                                data-plasmic-override={overrides.frame27}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.frame27)}
                            >
                                <div
                                    data-plasmic-name={'title3'}
                                    data-plasmic-override={overrides.title3}
                                    className={classNames(projectcss.all, sty.title3)}
                                >
                                    <div
                                        data-plasmic-name={'title4'}
                                        data-plasmic-override={overrides.title4}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.title4)}
                                    >
                                        {'Overrides:'}
                                    </div>
                                </div>

                                <div
                                    data-plasmic-name={'_32Minus'}
                                    data-plasmic-override={overrides._32Minus}
                                    className={classNames(projectcss.all, sty._32Minus)}
                                >
                                    <p.PlasmicImg
                                        alt={''}
                                        className={classNames(sty.img___9VMtA)}
                                        displayHeight={'14.736px' as const}
                                        displayMaxHeight={'none' as const}
                                        displayMaxWidth={'100%' as const}
                                        displayMinHeight={'0' as const}
                                        displayMinWidth={'0' as const}
                                        displayWidth={'14px' as const}
                                        loading={'lazy' as const}
                                        src={{
                                            src: 'https://site-assets.plasmic.app/0775fb4377c0de62caf987a71f94b0ea.svg',
                                            fullWidth: 14,
                                            fullHeight: 14.736,
                                            aspectRatio: 0.933333,
                                        }}
                                    />
                                </div>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow'}
                                data-plasmic-override={overrides.layerListRow}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame87'}
                                    data-plasmic-override={overrides.frame87}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame87)}
                                >
                                    <div
                                        data-plasmic-name={'rgb'}
                                        data-plasmic-override={overrides.rgb}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb)}
                                    >
                                        {'Color Fill'}
                                    </div>
                                </p.Stack>

                                <Arrow className={classNames('__wab_instance', sty.arrow__u9EL3)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame89'}
                                    data-plasmic-override={overrides.frame89}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame89)}
                                >
                                    <p.PlasmicImg
                                        alt={''}
                                        className={classNames(sty.img__l2HZn)}
                                        displayHeight={'18px' as const}
                                        displayMaxHeight={'none' as const}
                                        displayMaxWidth={'100%' as const}
                                        displayMinHeight={'0' as const}
                                        displayMinWidth={'0' as const}
                                        displayWidth={'18px' as const}
                                        loading={'lazy' as const}
                                        src={{
                                            src: 'https://site-assets.plasmic.app/ef5f923b08d0c56c2ed14764c6b74173.svg',
                                            fullWidth: 18,
                                            fullHeight: 18,
                                            aspectRatio: 1,
                                        }}
                                    />

                                    <Remove className={classNames('__wab_instance', sty.remove___7KZRe)} />
                                </p.Stack>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow2'}
                                data-plasmic-override={overrides.layerListRow2}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow2)}
                            >
                                <div
                                    data-plasmic-name={'rgb2'}
                                    data-plasmic-override={overrides.rgb2}
                                    className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb2)}
                                >
                                    {'Padding Top'}
                                </div>

                                <Arrow className={classNames('__wab_instance', sty.arrow__xXx5W)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame90'}
                                    data-plasmic-override={overrides.frame90}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame90)}
                                >
                                    <div
                                        data-plasmic-name={'a'}
                                        data-plasmic-override={overrides.a}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.a)}
                                    >
                                        {'16px'}
                                    </div>

                                    <Remove className={classNames('__wab_instance', sty.remove__fa3Ie)} />
                                </p.Stack>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow3'}
                                data-plasmic-override={overrides.layerListRow3}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow3)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame86'}
                                    data-plasmic-override={overrides.frame86}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame86)}
                                >
                                    <div
                                        data-plasmic-name={'rgb3'}
                                        data-plasmic-override={overrides.rgb3}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb3)}
                                    >
                                        {'Padding Bottom'}
                                    </div>
                                </p.Stack>

                                <Arrow className={classNames('__wab_instance', sty.arrow__vCrjm)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame91'}
                                    data-plasmic-override={overrides.frame91}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame91)}
                                >
                                    <div
                                        data-plasmic-name={'a2'}
                                        data-plasmic-override={overrides.a2}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.a2)}
                                    >
                                        {'16px'}
                                    </div>

                                    <Remove className={classNames('__wab_instance', sty.remove__lYCxM)} />
                                </p.Stack>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow4'}
                                data-plasmic-override={overrides.layerListRow4}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow4)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame88'}
                                    data-plasmic-override={overrides.frame88}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame88)}
                                >
                                    <div
                                        data-plasmic-name={'rgb4'}
                                        data-plasmic-override={overrides.rgb4}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb4)}
                                    >
                                        {'Visible'}
                                    </div>
                                </p.Stack>

                                <Arrow className={classNames('__wab_instance', sty.arrow__lui5U)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame92'}
                                    data-plasmic-override={overrides.frame92}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame92)}
                                >
                                    <div
                                        data-plasmic-name={'a3'}
                                        data-plasmic-override={overrides.a3}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.a3)}
                                    >
                                        {'true'}
                                    </div>

                                    <Remove className={classNames('__wab_instance', sty.remove__lR0Gb)} />
                                </p.Stack>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow5'}
                                data-plasmic-override={overrides.layerListRow5}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow5)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame93'}
                                    data-plasmic-override={overrides.frame93}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame93)}
                                >
                                    <div
                                        data-plasmic-name={'rgb5'}
                                        data-plasmic-override={overrides.rgb5}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb5)}
                                    >
                                        {'Constraint'}
                                    </div>

                                    <IconIcon className={classNames(projectcss.all, sty.svg__ahD2U)} role={'img'} />
                                </p.Stack>

                                <Arrow className={classNames('__wab_instance', sty.arrow__pa7M7)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame94'}
                                    data-plasmic-override={overrides.frame94}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame94)}
                                >
                                    <div
                                        data-plasmic-name={'a4'}
                                        data-plasmic-override={overrides.a4}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.a4)}
                                    >
                                        {'scale'}
                                    </div>

                                    <Remove className={classNames('__wab_instance', sty.remove__qr3Y9)} />
                                </p.Stack>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow6'}
                                data-plasmic-override={overrides.layerListRow6}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow6)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame95'}
                                    data-plasmic-override={overrides.frame95}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame95)}
                                >
                                    <div
                                        data-plasmic-name={'rgb6'}
                                        data-plasmic-override={overrides.rgb6}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb6)}
                                    >
                                        {'Constraint'}
                                    </div>

                                    <IconIcon className={classNames(projectcss.all, sty.svg__vcglu)} role={'img'} />
                                </p.Stack>

                                <Arrow className={classNames('__wab_instance', sty.arrow__tYyXl)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame96'}
                                    data-plasmic-override={overrides.frame96}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame96)}
                                >
                                    <div
                                        data-plasmic-name={'a5'}
                                        data-plasmic-override={overrides.a5}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.a5)}
                                    >
                                        {'top and bottom'}
                                    </div>

                                    <Remove className={classNames('__wab_instance', sty.remove__ecInA)} />
                                </p.Stack>
                            </p.Stack>

                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'layerListRow7'}
                                data-plasmic-override={overrides.layerListRow7}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.layerListRow7)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame97'}
                                    data-plasmic-override={overrides.frame97}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame97)}
                                >
                                    <div
                                        data-plasmic-name={'rgb7'}
                                        data-plasmic-override={overrides.rgb7}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.rgb7)}
                                    >
                                        {'Layout Mode'}
                                    </div>
                                </p.Stack>

                                <Arrow className={classNames('__wab_instance', sty.arrow__zKyNf)} />

                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'frame98'}
                                    data-plasmic-override={overrides.frame98}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.frame98)}
                                >
                                    <div
                                        data-plasmic-name={'a6'}
                                        data-plasmic-override={overrides.a6}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.a6)}
                                    >
                                        {'horizontal'}
                                    </div>

                                    <Remove className={classNames('__wab_instance', sty.remove__clXuw)} />
                                </p.Stack>
                            </p.Stack>
                        </p.Stack>

                        <p.Stack
                            as={'div'}
                            data-plasmic-name={'frame51'}
                            data-plasmic-override={overrides.frame51}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame51)}
                        >
                            <SeparatorIcon className={classNames(projectcss.all, sty.svg__mY0Wp)} role={'img'} />

                            <div
                                data-plasmic-name={'frame'}
                                data-plasmic-override={overrides.frame}
                                className={classNames(projectcss.all, sty.frame)}
                            >
                                <div
                                    data-plasmic-name={'text'}
                                    data-plasmic-override={overrides.text}
                                    className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
                                >
                                    {'You can copy(⌘C), paste, or delete these overrides'}
                                </div>
                            </div>
                        </p.Stack>
                    </div>
                </div>
            </div>
        </React.Fragment>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: [
        'root',
        'selection',
        'frame52',
        'frame27',
        'title3',
        'title4',
        '_32Minus',
        'layerListRow',
        'frame87',
        'rgb',
        'frame89',
        'layerListRow2',
        'rgb2',
        'frame90',
        'a',
        'layerListRow3',
        'frame86',
        'rgb3',
        'frame91',
        'a2',
        'layerListRow4',
        'frame88',
        'rgb4',
        'frame92',
        'a3',
        'layerListRow5',
        'frame93',
        'rgb5',
        'frame94',
        'a4',
        'layerListRow6',
        'frame95',
        'rgb6',
        'frame96',
        'a5',
        'layerListRow7',
        'frame97',
        'rgb7',
        'frame98',
        'a6',
        'frame51',
        'frame',
        'text',
    ],
    selection: [
        'selection',
        'frame52',
        'frame27',
        'title3',
        'title4',
        '_32Minus',
        'layerListRow',
        'frame87',
        'rgb',
        'frame89',
        'layerListRow2',
        'rgb2',
        'frame90',
        'a',
        'layerListRow3',
        'frame86',
        'rgb3',
        'frame91',
        'a2',
        'layerListRow4',
        'frame88',
        'rgb4',
        'frame92',
        'a3',
        'layerListRow5',
        'frame93',
        'rgb5',
        'frame94',
        'a4',
        'layerListRow6',
        'frame95',
        'rgb6',
        'frame96',
        'a5',
        'layerListRow7',
        'frame97',
        'rgb7',
        'frame98',
        'a6',
        'frame51',
        'frame',
        'text',
    ],
    frame52: [
        'frame52',
        'frame27',
        'title3',
        'title4',
        '_32Minus',
        'layerListRow',
        'frame87',
        'rgb',
        'frame89',
        'layerListRow2',
        'rgb2',
        'frame90',
        'a',
        'layerListRow3',
        'frame86',
        'rgb3',
        'frame91',
        'a2',
        'layerListRow4',
        'frame88',
        'rgb4',
        'frame92',
        'a3',
        'layerListRow5',
        'frame93',
        'rgb5',
        'frame94',
        'a4',
        'layerListRow6',
        'frame95',
        'rgb6',
        'frame96',
        'a5',
        'layerListRow7',
        'frame97',
        'rgb7',
        'frame98',
        'a6',
    ],
    frame27: ['frame27', 'title3', 'title4', '_32Minus'],
    title3: ['title3', 'title4'],
    title4: ['title4'],
    _32Minus: ['_32Minus'],
    layerListRow: ['layerListRow', 'frame87', 'rgb', 'frame89'],
    frame87: ['frame87', 'rgb'],
    rgb: ['rgb'],
    frame89: ['frame89'],
    layerListRow2: ['layerListRow2', 'rgb2', 'frame90', 'a'],
    rgb2: ['rgb2'],
    frame90: ['frame90', 'a'],
    a: ['a'],
    layerListRow3: ['layerListRow3', 'frame86', 'rgb3', 'frame91', 'a2'],
    frame86: ['frame86', 'rgb3'],
    rgb3: ['rgb3'],
    frame91: ['frame91', 'a2'],
    a2: ['a2'],
    layerListRow4: ['layerListRow4', 'frame88', 'rgb4', 'frame92', 'a3'],
    frame88: ['frame88', 'rgb4'],
    rgb4: ['rgb4'],
    frame92: ['frame92', 'a3'],
    a3: ['a3'],
    layerListRow5: ['layerListRow5', 'frame93', 'rgb5', 'frame94', 'a4'],
    frame93: ['frame93', 'rgb5'],
    rgb5: ['rgb5'],
    frame94: ['frame94', 'a4'],
    a4: ['a4'],
    layerListRow6: ['layerListRow6', 'frame95', 'rgb6', 'frame96', 'a5'],
    frame95: ['frame95', 'rgb6'],
    rgb6: ['rgb6'],
    frame96: ['frame96', 'a5'],
    a5: ['a5'],
    layerListRow7: ['layerListRow7', 'frame97', 'rgb7', 'frame98', 'a6'],
    frame97: ['frame97', 'rgb7'],
    rgb7: ['rgb7'],
    frame98: ['frame98', 'a6'],
    a6: ['a6'],
    frame51: ['frame51', 'frame', 'text'],
    frame: ['frame', 'text'],
    text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    selection: 'div';
    frame52: 'div';
    frame27: 'div';
    title3: 'div';
    title4: 'div';
    _32Minus: 'div';
    layerListRow: 'div';
    frame87: 'div';
    rgb: 'div';
    frame89: 'div';
    layerListRow2: 'div';
    rgb2: 'div';
    frame90: 'div';
    a: 'div';
    layerListRow3: 'div';
    frame86: 'div';
    rgb3: 'div';
    frame91: 'div';
    a2: 'div';
    layerListRow4: 'div';
    frame88: 'div';
    rgb4: 'div';
    frame92: 'div';
    a3: 'div';
    layerListRow5: 'div';
    frame93: 'div';
    rgb5: 'div';
    frame94: 'div';
    a4: 'div';
    layerListRow6: 'div';
    frame95: 'div';
    rgb6: 'div';
    frame96: 'div';
    a5: 'div';
    layerListRow7: 'div';
    frame97: 'div';
    rgb7: 'div';
    frame98: 'div';
    a6: 'div';
    frame51: 'div';
    frame: 'div';
    text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicInspectDiff__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicInspectDiff__VariantsArgs;
        args?: PlasmicInspectDiff__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicInspectDiff__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicInspectDiff__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicInspectDiff__ArgProps,
            internalVariantPropNames: PlasmicInspectDiff__VariantProps,
        });

        return PlasmicInspectDiff__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicInspectDiff';
    } else {
        func.displayName = `PlasmicInspectDiff.${nodeName}`;
    }
    return func;
}

export const PlasmicInspectDiff = Object.assign(
    // Top-level PlasmicInspectDiff renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        selection: makeNodeComponent('selection'),
        frame52: makeNodeComponent('frame52'),
        frame27: makeNodeComponent('frame27'),
        title3: makeNodeComponent('title3'),
        title4: makeNodeComponent('title4'),
        _32Minus: makeNodeComponent('_32Minus'),
        layerListRow: makeNodeComponent('layerListRow'),
        frame87: makeNodeComponent('frame87'),
        rgb: makeNodeComponent('rgb'),
        frame89: makeNodeComponent('frame89'),
        layerListRow2: makeNodeComponent('layerListRow2'),
        rgb2: makeNodeComponent('rgb2'),
        frame90: makeNodeComponent('frame90'),
        a: makeNodeComponent('a'),
        layerListRow3: makeNodeComponent('layerListRow3'),
        frame86: makeNodeComponent('frame86'),
        rgb3: makeNodeComponent('rgb3'),
        frame91: makeNodeComponent('frame91'),
        a2: makeNodeComponent('a2'),
        layerListRow4: makeNodeComponent('layerListRow4'),
        frame88: makeNodeComponent('frame88'),
        rgb4: makeNodeComponent('rgb4'),
        frame92: makeNodeComponent('frame92'),
        a3: makeNodeComponent('a3'),
        layerListRow5: makeNodeComponent('layerListRow5'),
        frame93: makeNodeComponent('frame93'),
        rgb5: makeNodeComponent('rgb5'),
        frame94: makeNodeComponent('frame94'),
        a4: makeNodeComponent('a4'),
        layerListRow6: makeNodeComponent('layerListRow6'),
        frame95: makeNodeComponent('frame95'),
        rgb6: makeNodeComponent('rgb6'),
        frame96: makeNodeComponent('frame96'),
        a5: makeNodeComponent('a5'),
        layerListRow7: makeNodeComponent('layerListRow7'),
        frame97: makeNodeComponent('frame97'),
        rgb7: makeNodeComponent('rgb7'),
        frame98: makeNodeComponent('frame98'),
        a6: makeNodeComponent('a6'),
        frame51: makeNodeComponent('frame51'),
        frame: makeNodeComponent('frame'),
        text: makeNodeComponent('text'),

        // Metadata about props expected for PlasmicInspectDiff
        internalVariantProps: PlasmicInspectDiff__VariantProps,
        internalArgProps: PlasmicInspectDiff__ArgProps,
    }
);

export default PlasmicInspectDiff;
/* prettier-ignore-end */
