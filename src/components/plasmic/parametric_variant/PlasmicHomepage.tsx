// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: o0Y7zjg91qE8
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Button from '../../Button'; // plasmic-import: cSQMAe0reF/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicHomepage.module.css'; // plasmic-import: o0Y7zjg91qE8/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
    root?: p.Flex<'div'>;
    emptySelection?: p.Flex<'div'>;
    freeBox?: p.Flex<'div'>;
    text?: p.Flex<'div'>;
};

export interface DefaultHomepageProps {
    className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
    variants: PlasmicHomepage__VariantsArgs;
    args: PlasmicHomepage__ArgsType;
    overrides: PlasmicHomepage__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <React.Fragment>
            {}
            {}

            <div className={projectcss.plasmic_page_wrapper}>
                <p.Stack
                    as={'div'}
                    data-plasmic-name={'root'}
                    data-plasmic-override={overrides.root}
                    data-plasmic-root={true}
                    data-plasmic-for-node={forNode}
                    hasGap={true}
                    className={classNames(
                        projectcss.all,
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        sty.root
                    )}
                >
                    <div
                        data-plasmic-name={'emptySelection'}
                        data-plasmic-override={overrides.emptySelection}
                        className={classNames(projectcss.all, sty.emptySelection)}
                    >
                        {true ? (
                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'freeBox'}
                                data-plasmic-override={overrides.freeBox}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.freeBox)}
                            >
                                <Button
                                    className={classNames('__wab_instance', sty.button__rj7WA)}
                                    text={'Create Parametric Component Set'}
                                    type={'primary' as const}
                                />

                                <Button
                                    className={classNames('__wab_instance', sty.button__mqDzd)}
                                    text={
                                        <div
                                            data-plasmic-name={'text'}
                                            data-plasmic-override={overrides.text}
                                            className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
                                        >
                                            {'Open tutorial file'}
                                        </div>
                                    }
                                    type={'secondary' as const}
                                />
                            </p.Stack>
                        ) : null}
                    </div>
                </p.Stack>
            </div>
        </React.Fragment>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'emptySelection', 'freeBox', 'text'],
    emptySelection: ['emptySelection', 'freeBox', 'text'],
    freeBox: ['freeBox', 'text'],
    text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    emptySelection: 'div';
    freeBox: 'div';
    text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHomepage__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicHomepage__VariantsArgs;
        args?: PlasmicHomepage__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicHomepage__ArgProps,
            internalVariantPropNames: PlasmicHomepage__VariantProps,
        });

        return PlasmicHomepage__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicHomepage';
    } else {
        func.displayName = `PlasmicHomepage.${nodeName}`;
    }
    return func;
}

export const PlasmicHomepage = Object.assign(
    // Top-level PlasmicHomepage renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        emptySelection: makeNodeComponent('emptySelection'),
        freeBox: makeNodeComponent('freeBox'),
        text: makeNodeComponent('text'),

        // Metadata about props expected for PlasmicHomepage
        internalVariantProps: PlasmicHomepage__VariantProps,
        internalArgProps: PlasmicHomepage__ArgProps,
    }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
