// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: p_FCLC3X1L
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicArrow.module.css'; // plasmic-import: p_FCLC3X1L/css

import Line12Icon from './icons/PlasmicIcon__Line12'; // plasmic-import: KIsXGV_sZV/icon

export type PlasmicArrow__VariantMembers = {};

export type PlasmicArrow__VariantsArgs = {};
type VariantPropType = keyof PlasmicArrow__VariantsArgs;
export const PlasmicArrow__VariantProps = new Array<VariantPropType>();

export type PlasmicArrow__ArgsType = {};
type ArgPropType = keyof PlasmicArrow__ArgsType;
export const PlasmicArrow__ArgProps = new Array<ArgPropType>();

export type PlasmicArrow__OverridesType = {
    root?: p.Flex<'svg'>;
};

export interface DefaultArrowProps {
    className?: string;
}

function PlasmicArrow__RenderFunc(props: {
    variants: PlasmicArrow__VariantsArgs;
    args: PlasmicArrow__ArgsType;
    overrides: PlasmicArrow__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <Line12Icon
            data-plasmic-name={'root'}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
                projectcss.all,
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                sty.root
            )}
            role={'img'}
        />
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicArrow__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicArrow__VariantsArgs;
        args?: PlasmicArrow__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicArrow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicArrow__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicArrow__ArgProps,
            internalVariantPropNames: PlasmicArrow__VariantProps,
        });

        return PlasmicArrow__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicArrow';
    } else {
        func.displayName = `PlasmicArrow.${nodeName}`;
    }
    return func;
}

export const PlasmicArrow = Object.assign(
    // Top-level PlasmicArrow renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements

        // Metadata about props expected for PlasmicArrow
        internalVariantProps: PlasmicArrow__VariantProps,
        internalArgProps: PlasmicArrow__ArgProps,
    }
);

export default PlasmicArrow;
/* prettier-ignore-end */
