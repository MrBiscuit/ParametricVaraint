// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: 7KMCgFx4JT
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicCreate.module.css'; // plasmic-import: 7KMCgFx4JT/css

import SeparatorIcon from './icons/PlasmicIcon__Separator'; // plasmic-import: _JYn_hvct4/icon
import _Icon from './icons/PlasmicIcon___'; // plasmic-import: v-4VAvBIyg/icon
import HaFillIcon from './icons/PlasmicIcon__HaFill'; // plasmic-import: YKI3zxAmSYQ/icon
import _2Icon from './icons/PlasmicIcon___2'; // plasmic-import: CyceAvFD-oi/icon

export type PlasmicCreate__VariantMembers = {};

export type PlasmicCreate__VariantsArgs = {};
type VariantPropType = keyof PlasmicCreate__VariantsArgs;
export const PlasmicCreate__VariantProps = new Array<VariantPropType>();

export type PlasmicCreate__ArgsType = {};
type ArgPropType = keyof PlasmicCreate__ArgsType;
export const PlasmicCreate__ArgProps = new Array<ArgPropType>();

export type PlasmicCreate__OverridesType = {
    root?: p.Flex<'div'>;
    createVariant?: p.Flex<'div'>;
    frame53?: p.Flex<'div'>;
    frame50?: p.Flex<'div'>;
    frame18?: p.Flex<'div'>;
    type?: p.Flex<'div'>;
    frame16?: p.Flex<'div'>;
    frame2?: p.Flex<'div'>;
    frame3?: p.Flex<'div'>;
    frame19?: p.Flex<'div'>;
    name?: p.Flex<'div'>;
    frame84?: p.Flex<'div'>;
    value?: p.Flex<'div'>;
    frame20?: p.Flex<'div'>;
    defaultValue?: p.Flex<'div'>;
    frame21?: p.Flex<'div'>;
    frame4?: p.Flex<'div'>;
    frame5?: p.Flex<'div'>;
    button?: p.Flex<'div'>;
    buttonFrame?: p.Flex<'div'>;
    title7?: p.Flex<'div'>;
    createInteractiveState?: p.Flex<'div'>;
    floatingTitleBar6?: p.Flex<'div'>;
    title19?: p.Flex<'div'>;
    title20?: p.Flex<'div'>;
    frame56?: p.Flex<'div'>;
    frame57?: p.Flex<'div'>;
    frame26?: p.Flex<'div'>;
    state?: p.Flex<'div'>;
    optionMenu?: p.Flex<'div'>;
    value4?: p.Flex<'div'>;
    button7?: p.Flex<'div'>;
    buttonFrame7?: p.Flex<'div'>;
    title21?: p.Flex<'div'>;
};

export interface DefaultCreateProps {
    className?: string;
}

function PlasmicCreate__RenderFunc(props: {
    variants: PlasmicCreate__VariantsArgs;
    args: PlasmicCreate__ArgsType;
    overrides: PlasmicCreate__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        <React.Fragment>
            {}
            {}

            <div className={projectcss.plasmic_page_wrapper}>
                <div
                    data-plasmic-name={'root'}
                    data-plasmic-override={overrides.root}
                    data-plasmic-root={true}
                    data-plasmic-for-node={forNode}
                    className={classNames(
                        projectcss.all,
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        sty.root
                    )}
                >
                    <div
                        data-plasmic-name={'createVariant'}
                        data-plasmic-override={overrides.createVariant}
                        className={classNames(projectcss.all, sty.createVariant)}
                    >
                        <p.Stack
                            as={'div'}
                            data-plasmic-name={'frame53'}
                            data-plasmic-override={overrides.frame53}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame53)}
                        >
                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'frame50'}
                                data-plasmic-override={overrides.frame50}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.frame50)}
                            >
                                <div
                                    data-plasmic-name={'frame18'}
                                    data-plasmic-override={overrides.frame18}
                                    className={classNames(projectcss.all, sty.frame18)}
                                >
                                    <div
                                        data-plasmic-name={'type'}
                                        data-plasmic-override={overrides.type}
                                        className={classNames(projectcss.all, sty.type)}
                                    >
                                        <div
                                            className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__aPflC
                                            )}
                                        >
                                            {'Type'}
                                        </div>
                                    </div>

                                    <div
                                        data-plasmic-name={'frame16'}
                                        data-plasmic-override={overrides.frame16}
                                        className={classNames(projectcss.all, sty.frame16)}
                                    >
                                        <div className={classNames(projectcss.all, sty.freeBox__bPmBb)}>
                                            <p.Stack
                                                as={'div'}
                                                data-plasmic-name={'frame2'}
                                                data-plasmic-override={overrides.frame2}
                                                hasGap={true}
                                                className={classNames(projectcss.all, sty.frame2)}
                                            >
                                                <div className={classNames(projectcss.all, sty.freeBox__dAvGw)}>
                                                    <div
                                                        className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text___61PrK
                                                        )}
                                                    >
                                                        {'Toggle'}
                                                    </div>
                                                </div>
                                            </p.Stack>
                                        </div>

                                        <p.Stack
                                            as={'div'}
                                            data-plasmic-name={'frame3'}
                                            data-plasmic-override={overrides.frame3}
                                            hasGap={true}
                                            className={classNames(projectcss.all, sty.frame3)}
                                        >
                                            <div
                                                className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__dphg5
                                                )}
                                            >
                                                {'Select'}
                                            </div>
                                        </p.Stack>
                                    </div>
                                </div>

                                <div
                                    data-plasmic-name={'frame19'}
                                    data-plasmic-override={overrides.frame19}
                                    className={classNames(projectcss.all, sty.frame19)}
                                >
                                    <div
                                        data-plasmic-name={'name'}
                                        data-plasmic-override={overrides.name}
                                        className={classNames(projectcss.all, sty.name)}
                                    >
                                        <div
                                            className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__xMsyh
                                            )}
                                        >
                                            {'Name'}
                                        </div>
                                    </div>

                                    <p.Stack
                                        as={'div'}
                                        data-plasmic-name={'frame84'}
                                        data-plasmic-override={overrides.frame84}
                                        hasGap={true}
                                        className={classNames(projectcss.all, sty.frame84)}
                                    >
                                        <div
                                            data-plasmic-name={'value'}
                                            data-plasmic-override={overrides.value}
                                            className={classNames(projectcss.all, projectcss.__wab_text, sty.value)}
                                        >
                                            {'|'}
                                        </div>
                                    </p.Stack>
                                </div>

                                <div
                                    data-plasmic-name={'frame20'}
                                    data-plasmic-override={overrides.frame20}
                                    className={classNames(projectcss.all, sty.frame20)}
                                >
                                    <div
                                        data-plasmic-name={'defaultValue'}
                                        data-plasmic-override={overrides.defaultValue}
                                        className={classNames(projectcss.all, sty.defaultValue)}
                                    >
                                        <div
                                            className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__tve5R
                                            )}
                                        >
                                            {'Default Value'}
                                        </div>
                                    </div>

                                    <div
                                        data-plasmic-name={'frame21'}
                                        data-plasmic-override={overrides.frame21}
                                        className={classNames(projectcss.all, sty.frame21)}
                                    >
                                        <div className={classNames(projectcss.all, sty.freeBox__vmuax)}>
                                            <p.Stack
                                                as={'div'}
                                                data-plasmic-name={'frame4'}
                                                data-plasmic-override={overrides.frame4}
                                                hasGap={true}
                                                className={classNames(projectcss.all, sty.frame4)}
                                            >
                                                <div className={classNames(projectcss.all, sty.freeBox___3IFaf)}>
                                                    <div
                                                        className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text___9JPHi
                                                        )}
                                                    >
                                                        {'True'}
                                                    </div>
                                                </div>
                                            </p.Stack>
                                        </div>

                                        <p.Stack
                                            as={'div'}
                                            data-plasmic-name={'frame5'}
                                            data-plasmic-override={overrides.frame5}
                                            hasGap={true}
                                            className={classNames(projectcss.all, sty.frame5)}
                                        >
                                            <div
                                                className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___9BWv
                                                )}
                                            >
                                                {'Flase'}
                                            </div>
                                        </p.Stack>
                                    </div>
                                </div>
                            </p.Stack>

                            <SeparatorIcon className={classNames(projectcss.all, sty.svg__pv5I)} role={'img'} />
                        </p.Stack>

                        <div className={classNames(projectcss.all, sty.freeBox__cXi8P)}>
                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'button'}
                                data-plasmic-override={overrides.button}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.button)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'buttonFrame'}
                                    data-plasmic-override={overrides.buttonFrame}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.buttonFrame)}
                                >
                                    <div
                                        data-plasmic-name={'title7'}
                                        data-plasmic-override={overrides.title7}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.title7)}
                                    >
                                        {'Create Variant'}
                                    </div>
                                </p.Stack>
                            </p.Stack>
                        </div>
                    </div>

                    <div
                        data-plasmic-name={'createInteractiveState'}
                        data-plasmic-override={overrides.createInteractiveState}
                        className={classNames(projectcss.all, sty.createInteractiveState)}
                    >
                        <div
                            data-plasmic-name={'floatingTitleBar6'}
                            data-plasmic-override={overrides.floatingTitleBar6}
                            className={classNames(projectcss.all, sty.floatingTitleBar6)}
                        >
                            <SeparatorIcon className={classNames(projectcss.all, sty.svg__xKld6)} role={'img'} />

                            <_Icon className={classNames(projectcss.all, sty.svg__rFuou)} role={'img'} />

                            <div
                                data-plasmic-name={'title19'}
                                data-plasmic-override={overrides.title19}
                                className={classNames(projectcss.all, sty.title19)}
                            >
                                <div
                                    data-plasmic-name={'title20'}
                                    data-plasmic-override={overrides.title20}
                                    className={classNames(projectcss.all, projectcss.__wab_text, sty.title20)}
                                >
                                    {'Parametric Variants ◆'}
                                </div>
                            </div>
                        </div>

                        <p.Stack
                            as={'div'}
                            data-plasmic-name={'frame56'}
                            data-plasmic-override={overrides.frame56}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame56)}
                        >
                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'frame57'}
                                data-plasmic-override={overrides.frame57}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.frame57)}
                            >
                                <div
                                    data-plasmic-name={'frame26'}
                                    data-plasmic-override={overrides.frame26}
                                    className={classNames(projectcss.all, sty.frame26)}
                                >
                                    <div
                                        data-plasmic-name={'state'}
                                        data-plasmic-override={overrides.state}
                                        className={classNames(projectcss.all, sty.state)}
                                    >
                                        <div
                                            className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__iNfUf
                                            )}
                                        >
                                            {'State'}
                                        </div>
                                    </div>

                                    <div className={classNames(projectcss.all, sty.freeBox__sh3JH)}>
                                        <div
                                            data-plasmic-name={'optionMenu'}
                                            data-plasmic-override={overrides.optionMenu}
                                            className={classNames(projectcss.all, sty.optionMenu)}
                                        >
                                            <div
                                                data-plasmic-name={'value4'}
                                                data-plasmic-override={overrides.value4}
                                                className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.value4
                                                )}
                                            >
                                                {'Option menu'}
                                            </div>

                                            <HaFillIcon
                                                className={classNames(projectcss.all, sty.svg__eoGcH)}
                                                role={'img'}
                                            />

                                            <_2Icon
                                                className={classNames(projectcss.all, sty.svg__mDjmV)}
                                                role={'img'}
                                            />
                                        </div>
                                    </div>
                                </div>
                            </p.Stack>

                            <SeparatorIcon className={classNames(projectcss.all, sty.svg__j6Zph)} role={'img'} />
                        </p.Stack>

                        <div className={classNames(projectcss.all, sty.freeBox___0CVrp)}>
                            <p.Stack
                                as={'div'}
                                data-plasmic-name={'button7'}
                                data-plasmic-override={overrides.button7}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.button7)}
                            >
                                <p.Stack
                                    as={'div'}
                                    data-plasmic-name={'buttonFrame7'}
                                    data-plasmic-override={overrides.buttonFrame7}
                                    hasGap={true}
                                    className={classNames(projectcss.all, sty.buttonFrame7)}
                                >
                                    <div
                                        data-plasmic-name={'title21'}
                                        data-plasmic-override={overrides.title21}
                                        className={classNames(projectcss.all, projectcss.__wab_text, sty.title21)}
                                    >
                                        {'Create Variant'}
                                    </div>
                                </p.Stack>
                            </p.Stack>
                        </div>
                    </div>
                </div>
            </div>
        </React.Fragment>
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: [
        'root',
        'createVariant',
        'frame53',
        'frame50',
        'frame18',
        'type',
        'frame16',
        'frame2',
        'frame3',
        'frame19',
        'name',
        'frame84',
        'value',
        'frame20',
        'defaultValue',
        'frame21',
        'frame4',
        'frame5',
        'button',
        'buttonFrame',
        'title7',
        'createInteractiveState',
        'floatingTitleBar6',
        'title19',
        'title20',
        'frame56',
        'frame57',
        'frame26',
        'state',
        'optionMenu',
        'value4',
        'button7',
        'buttonFrame7',
        'title21',
    ],
    createVariant: [
        'createVariant',
        'frame53',
        'frame50',
        'frame18',
        'type',
        'frame16',
        'frame2',
        'frame3',
        'frame19',
        'name',
        'frame84',
        'value',
        'frame20',
        'defaultValue',
        'frame21',
        'frame4',
        'frame5',
        'button',
        'buttonFrame',
        'title7',
    ],
    frame53: [
        'frame53',
        'frame50',
        'frame18',
        'type',
        'frame16',
        'frame2',
        'frame3',
        'frame19',
        'name',
        'frame84',
        'value',
        'frame20',
        'defaultValue',
        'frame21',
        'frame4',
        'frame5',
    ],
    frame50: [
        'frame50',
        'frame18',
        'type',
        'frame16',
        'frame2',
        'frame3',
        'frame19',
        'name',
        'frame84',
        'value',
        'frame20',
        'defaultValue',
        'frame21',
        'frame4',
        'frame5',
    ],
    frame18: ['frame18', 'type', 'frame16', 'frame2', 'frame3'],
    type: ['type'],
    frame16: ['frame16', 'frame2', 'frame3'],
    frame2: ['frame2'],
    frame3: ['frame3'],
    frame19: ['frame19', 'name', 'frame84', 'value'],
    name: ['name'],
    frame84: ['frame84', 'value'],
    value: ['value'],
    frame20: ['frame20', 'defaultValue', 'frame21', 'frame4', 'frame5'],
    defaultValue: ['defaultValue'],
    frame21: ['frame21', 'frame4', 'frame5'],
    frame4: ['frame4'],
    frame5: ['frame5'],
    button: ['button', 'buttonFrame', 'title7'],
    buttonFrame: ['buttonFrame', 'title7'],
    title7: ['title7'],
    createInteractiveState: [
        'createInteractiveState',
        'floatingTitleBar6',
        'title19',
        'title20',
        'frame56',
        'frame57',
        'frame26',
        'state',
        'optionMenu',
        'value4',
        'button7',
        'buttonFrame7',
        'title21',
    ],
    floatingTitleBar6: ['floatingTitleBar6', 'title19', 'title20'],
    title19: ['title19', 'title20'],
    title20: ['title20'],
    frame56: ['frame56', 'frame57', 'frame26', 'state', 'optionMenu', 'value4'],
    frame57: ['frame57', 'frame26', 'state', 'optionMenu', 'value4'],
    frame26: ['frame26', 'state', 'optionMenu', 'value4'],
    state: ['state'],
    optionMenu: ['optionMenu', 'value4'],
    value4: ['value4'],
    button7: ['button7', 'buttonFrame7', 'title21'],
    buttonFrame7: ['buttonFrame7', 'title21'],
    title21: ['title21'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    createVariant: 'div';
    frame53: 'div';
    frame50: 'div';
    frame18: 'div';
    type: 'div';
    frame16: 'div';
    frame2: 'div';
    frame3: 'div';
    frame19: 'div';
    name: 'div';
    frame84: 'div';
    value: 'div';
    frame20: 'div';
    defaultValue: 'div';
    frame21: 'div';
    frame4: 'div';
    frame5: 'div';
    button: 'div';
    buttonFrame: 'div';
    title7: 'div';
    createInteractiveState: 'div';
    floatingTitleBar6: 'div';
    title19: 'div';
    title20: 'div';
    frame56: 'div';
    frame57: 'div';
    frame26: 'div';
    state: 'div';
    optionMenu: 'div';
    value4: 'div';
    button7: 'div';
    buttonFrame7: 'div';
    title21: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicCreate__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicCreate__VariantsArgs;
        args?: PlasmicCreate__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicCreate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicCreate__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicCreate__ArgProps,
            internalVariantPropNames: PlasmicCreate__VariantProps,
        });

        return PlasmicCreate__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicCreate';
    } else {
        func.displayName = `PlasmicCreate.${nodeName}`;
    }
    return func;
}

export const PlasmicCreate = Object.assign(
    // Top-level PlasmicCreate renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        createVariant: makeNodeComponent('createVariant'),
        frame53: makeNodeComponent('frame53'),
        frame50: makeNodeComponent('frame50'),
        frame18: makeNodeComponent('frame18'),
        type: makeNodeComponent('type'),
        frame16: makeNodeComponent('frame16'),
        frame2: makeNodeComponent('frame2'),
        frame3: makeNodeComponent('frame3'),
        frame19: makeNodeComponent('frame19'),
        _name: makeNodeComponent('name'),
        frame84: makeNodeComponent('frame84'),
        value: makeNodeComponent('value'),
        frame20: makeNodeComponent('frame20'),
        defaultValue: makeNodeComponent('defaultValue'),
        frame21: makeNodeComponent('frame21'),
        frame4: makeNodeComponent('frame4'),
        frame5: makeNodeComponent('frame5'),
        button: makeNodeComponent('button'),
        buttonFrame: makeNodeComponent('buttonFrame'),
        title7: makeNodeComponent('title7'),
        createInteractiveState: makeNodeComponent('createInteractiveState'),
        floatingTitleBar6: makeNodeComponent('floatingTitleBar6'),
        title19: makeNodeComponent('title19'),
        title20: makeNodeComponent('title20'),
        frame56: makeNodeComponent('frame56'),
        frame57: makeNodeComponent('frame57'),
        frame26: makeNodeComponent('frame26'),
        state: makeNodeComponent('state'),
        optionMenu: makeNodeComponent('optionMenu'),
        value4: makeNodeComponent('value4'),
        button7: makeNodeComponent('button7'),
        buttonFrame7: makeNodeComponent('buttonFrame7'),
        title21: makeNodeComponent('title21'),

        // Metadata about props expected for PlasmicCreate
        internalVariantProps: PlasmicCreate__VariantProps,
        internalArgProps: PlasmicCreate__ArgProps,
    }
);

export default PlasmicCreate;
/* prettier-ignore-end */
