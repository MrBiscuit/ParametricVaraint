// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quwQo95zDfdBFMtbz7jPTa
// Component: ifDU5luwa2
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
    hasVariant,
    classNames,
    wrapWithClassName,
    createPlasmicElementProxy,
    makeFragment,
    MultiChoiceArg,
    SingleBooleanChoiceArg,
    SingleChoiceArg,
    pick,
    omit,
    useTrigger,
    StrictProps,
    deriveRenderOpts,
    ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Diff from '../../Diff'; // plasmic-import: EdYLllBgHm/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_parametric_variant.module.css'; // plasmic-import: quwQo95zDfdBFMtbz7jPTa/projectcss
import sty from './PlasmicLayer.module.css'; // plasmic-import: ifDU5luwa2/css

export type PlasmicLayer__VariantMembers = {};

export type PlasmicLayer__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayer__VariantsArgs;
export const PlasmicLayer__VariantProps = new Array<VariantPropType>();

export type PlasmicLayer__ArgsType = {
    items?: React.ReactNode;
    layerName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLayer__ArgsType;
export const PlasmicLayer__ArgProps = new Array<ArgPropType>('items', 'layerName');

export type PlasmicLayer__OverridesType = {
    root?: p.Flex<'div'>;
    name?: p.Flex<'div'>;
    text?: p.Flex<'div'>;
};

export interface DefaultLayerProps {
    items?: React.ReactNode;
    layerName?: React.ReactNode;
    className?: string;
}

function PlasmicLayer__RenderFunc(props: {
    variants: PlasmicLayer__VariantsArgs;
    args: PlasmicLayer__ArgsType;
    overrides: PlasmicLayer__OverridesType;

    forNode?: string;
}) {
    const {variants, args, overrides, forNode} = props;
    const $props = props.args;

    return (
        true ? (
            <div
                data-plasmic-name={'root'}
                data-plasmic-override={overrides.root}
                data-plasmic-root={true}
                data-plasmic-for-node={forNode}
                className={classNames(
                    projectcss.all,
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    sty.root
                )}
            >
                {true ? (
                    <p.Stack as={'div'} hasGap={true} className={classNames(projectcss.all, sty.freeBox__hlnJx)}>
                        <div
                            data-plasmic-name={'name'}
                            data-plasmic-override={overrides.name}
                            className={classNames(projectcss.all, sty.name)}
                        >
                            {p.renderPlasmicSlot({
                                defaultContents: 'Rectangle 1',
                                value: args.layerName,
                                className: classNames(sty.slotTargetLayerName),
                            })}
                        </div>

                        <div
                            data-plasmic-name={'text'}
                            data-plasmic-override={overrides.text}
                            className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
                        >
                            {':'}
                        </div>
                    </p.Stack>
                ) : null}

                <div className={classNames(projectcss.all, sty.freeBox__iRKo6)}>
                    {p.renderPlasmicSlot({
                        defaultContents: (
                            <React.Fragment>
                                <Diff
                                    className={classNames('__wab_instance', sty.diff__fjFte)}
                                    hasIcon={true}
                                    name={'Constraint'}
                                />

                                <Diff
                                    className={classNames('__wab_instance', sty.diff__sdClZ)}
                                    name={'Fills'}
                                    value={'#234234'}
                                />
                            </React.Fragment>
                        ),
                        value: args.items,
                    })}
                </div>
            </div>
        ) : null
    ) as React.ReactElement | null;
}

const PlasmicDescendants = {
    root: ['root', 'name', 'text'],
    name: ['name'],
    text: ['text'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
    root: 'div';
    name: 'div';
    text: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicLayer__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> =
    // Explicitly specify variants, args, and overrides as objects
    {
        variants?: PlasmicLayer__VariantsArgs;
        args?: PlasmicLayer__ArgsType;
        overrides?: NodeOverridesType<T>;
    } & Omit<PlasmicLayer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
        // Specify args directly as props
        Omit<PlasmicLayer__ArgsType, ReservedPropsType> &
        // Specify overrides for each element directly as props
        Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
        // Specify props for the root element
        Omit<
            Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
            ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
        >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
    type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
    const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
            name: nodeName,
            descendantNames: [...PlasmicDescendants[nodeName]],
            internalArgPropNames: PlasmicLayer__ArgProps,
            internalVariantPropNames: PlasmicLayer__VariantProps,
        });

        return PlasmicLayer__RenderFunc({
            variants,
            args,
            overrides,
            forNode: nodeName,
        });
    };
    if (nodeName === 'root') {
        func.displayName = 'PlasmicLayer';
    } else {
        func.displayName = `PlasmicLayer.${nodeName}`;
    }
    return func;
}

export const PlasmicLayer = Object.assign(
    // Top-level PlasmicLayer renders the root element
    makeNodeComponent('root'),
    {
        // Helper components rendering sub-elements
        _name: makeNodeComponent('name'),
        text: makeNodeComponent('text'),

        // Metadata about props expected for PlasmicLayer
        internalVariantProps: PlasmicLayer__VariantProps,
        internalArgProps: PlasmicLayer__ArgProps,
    }
);

export default PlasmicLayer;
/* prettier-ignore-end */
